import telebot
import requests
from telebot import types
import datetime
from config import API_URLs, TelegramData


if __name__ == "__main__":
    cnt_filt_for_lost_calls = [0]
    cnt_filt_for_avg_sec = [0]
    cnt_filt_for_conversion = [0]


    all_messages_for_lost_calls = {}
    all_messages_for_avg_sec = {}
    all_messages_for_conversion = {}

    bot = telebot.TeleBot(TelegramData.access_token)


    @bot.message_handler(commands=['start'])
    def keyboard_for_start(message):
        markup = types.InlineKeyboardMarkup(row_width=3)
        btn1 = types.InlineKeyboardButton("üò† –í—á–µ—Ä–∞", callback_data='lost_yest')
        btn2 = types.InlineKeyboardButton("üòÉ –°–µ–≥–æ–¥–Ω—è", callback_data='lost_today')
        btn3 = types.InlineKeyboardButton("‚ùì –†—É—á–Ω–æ–π –≤–≤–æ–¥ ", callback_data='manual_lost')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤".format(message.from_user), reply_markup=markup)

        markup1 = types.InlineKeyboardMarkup(row_width=3)
        btn4 = types.InlineKeyboardButton("üò† –í—á–µ—Ä–∞", callback_data='avg_yest')
        btn5 = types.InlineKeyboardButton("üòÉ –°–µ–≥–æ–¥–Ω—è", callback_data='avg_today')
        btn6 = types.InlineKeyboardButton("‚ùì –†—É—á–Ω–æ–π –≤–≤–æ–¥ ", callback_data='manual_avg')
        markup1.add(btn4, btn5, btn6)
        bot.send_message(message.chat.id, text="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ READY".format(message.from_user), reply_markup=markup1)

        markup2 = types.InlineKeyboardMarkup(row_width=3)
        btn7 = types.InlineKeyboardButton("üò† –í—á–µ—Ä–∞", callback_data='conv_yest')
        btn8 = types.InlineKeyboardButton("üòÉ –°–µ–≥–æ–¥–Ω—è", callback_data='conv_today')
        btn9 = types.InlineKeyboardButton("‚ùì –†—É—á–Ω–æ–π –≤–≤–æ–¥ ", callback_data='manual_conv')
        markup2.add(btn7, btn8, btn9)
        bot.send_message(message.chat.id, text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥".format(message.from_user), reply_markup=markup2)


        markup3 = types.InlineKeyboardMarkup(row_width=1)
        btn10 = types.InlineKeyboardButton("üòé –í—ã–≤–µ—Å—Ç–∏", callback_data='info_phones')
        markup3.add(btn10)
        bot.send_message(message.chat.id,
                         text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö".format(message.from_user),
                     reply_markup=markup3)

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        today = datetime.datetime.today()
        one_day = datetime.timedelta(days=1)
        yesterday = today - one_day
        yesterday = yesterday.isoformat().split('T')
        yesterday = yesterday[0]

        today = datetime.datetime.today()
        today = today.isoformat().split('T')
        today = today[0]

        today1 = datetime.datetime.today()
        one_day = datetime.timedelta(days=1)
        tommorow = today1 + one_day
        tommorow = tommorow.isoformat().split('T')
        tommorow = tommorow[0]

        if call.message:
            if call.data == 'lost_yest':
                response_lost_data = requests.get(API_URLs.lost_calls,
                                                  params={'date_from': yesterday,
                                                          'date_to': today,
                                                          'project_id': None})
                dicti = response_lost_data.json()
                dct = dicti[0]
                value_percent_without_out = round(dct['percent_without_outbound'],4) # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                value_percent_w_out = round(dct['percent_with_outbound'],4) # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_without_usr_out = dct['count_without_user_and_outbound'] #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_all_without_out = dct['count_all_without_outbound'] #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_without_user = dct['count_without_user'] #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_all_w_out = dct['count_all_with_outbound'] # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                bot.send_message(call.message.chat.id, f"""
{yesterday}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_without_out}%
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_w_out}%
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö  = {cnt_without_usr_out}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_without_out}
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö   = {cnt_without_user}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_w_out}
                                """)
            elif call.data == 'lost_today':
                response_lost_data = requests.get(API_URLs.lost_calls,
                                                  params={'date_from': today,
                                                          'date_to': tommorow,
                                                          'project_id': None})
                dicti = response_lost_data.json()
                dct = dicti[0]
                value_percent_without_out = round(dct['percent_without_outbound'], 4)  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                value_percent_w_out = round(dct['percent_with_outbound'], 4)  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_without_usr_out = dct['count_without_user_and_outbound']
                cnt_all_without_out = dct['count_all_without_outbound']
                cnt_without_user = dct['count_without_user']
                cnt_all_w_out = dct['count_all_with_outbound']
                bot.send_message(call.message.chat.id, f"""
{today}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_without_out}%
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_w_out}%
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö  = {cnt_without_usr_out}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_without_out}
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö   = {cnt_without_user}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_w_out}
                                """)
            elif call.data == 'manual_lost':
                a = bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É /lost_calls")
                bot.register_next_step_handler(a, get_start)

            elif call.data == 'avg_yest':
                bot.send_message(call.message.chat.id, yesterday)
                response_lost_data = requests.get(API_URLs.average_seconds,
                                                  params={'date_from': yesterday,
                                                          'date_to': today})
                dicti = response_lost_data.json()
                lst = []
                for dct in dicti:
                    string = f"""user_id= {dct['user_id']}
created_at= {dct['created_at']}
avg_total= {dct['avg_total']}"""
                    lst.append(string)
                lst = '\n----------------\n'.join(lst)
                bot.send_message(call.message.chat.id, f'{lst}')

            elif call.data == 'avg_today':
                bot.send_message(call.message.chat.id, today)
                response_lost_data = requests.get(API_URLs.average_seconds,
                                                  params={'date_from': today,
                                                          'date_to': tommorow})
                dicti = response_lost_data.json()
                lst = []
                for dct in dicti:
                    string = f"""user_id= {dct['user_id']}
created_at= {dct['created_at']}
avg_total= {dct['avg_total']}"""
                    lst.append(string)
                lst = '\n----------------\n'.join(lst)
                bot.send_message(call.message.chat.id, f'{lst}')


            elif call.data == 'manual_avg':
                a = bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É /avg_sec")
                bot.register_next_step_handler(a, get_start_for_avg)


            elif call.data == 'conv_today':
                response_lost_data = requests.get(API_URLs.conversion,
                                                  params={'date_from': yesterday,
                                                          'date_to': today,
                                                          'project_id': None,
                                                          'user_id': None})
                dicti = response_lost_data.json()
                dct = dicti[0]
                key = round(dct['percentage'],4)
                bot.send_message(call.message.chat.id, f"""
–ü–µ—Ä–∏–æ–¥ {today}
–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ = {key}% """)

            elif call.data == 'conv_yest':
                response_lost_data = requests.get(API_URLs.conversion,
                                                  params={'date_from': today,
                                                          'date_to': tommorow,
                                                          'project_id': None,
                                                          'user_id': None})
                dicti = response_lost_data.json()
                dct = dicti[0]
                key = round(dct['percentage'],4)
                bot.send_message(call.message.chat.id, f"""
–ü–µ—Ä–∏–æ–¥ {yesterday}
–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ = {key}% """)

            elif call.data == 'manual_conv':
                a = bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É /conversion")
                bot.register_next_step_handler(a, get_start_for_conversion)

            elif call.data == 'info_phones':
                a = bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É /info_phones")
                bot.register_next_step_handler(a, get_info_phones)

    @bot.message_handler(commands=['lost_calls'])

    def get_start(message):
        global cnt_filt_for_lost_calls
        global all_messages_for_lost_calls
        try:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            button1 = types.KeyboardButton('–î–∞')
            button2 = types.KeyboardButton('–ù–µ—Ç')
            keyboard.add(button1, button2)
            if cnt_filt_for_lost_calls[0] == 0:
                msg = bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.–í—ã –≥–æ—Ç–æ–≤—ã?', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_from)
            elif cnt_filt_for_lost_calls[0] == 1:
                all_messages_for_lost_calls[len(all_messages_for_lost_calls) + 1] = message.text
                msg = bot.send_message(message.chat.id, ' –§–∏–ª—å—Ç—Ä date_from –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_to)
            elif cnt_filt_for_lost_calls[0] == 2:
                all_messages_for_lost_calls[len(all_messages_for_lost_calls) + 1] = message.text
                msg = bot.send_message(message.chat.id, ' –§–∏–ª—å—Ç—Ä date_to –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_project_id)
            else:
                all_messages_for_lost_calls[len(all_messages_for_lost_calls) + 1] = message.text
                bot.send_message(message.chat.id, '–ö–æ–Ω–µ—Ü –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤')

                if all_messages_for_lost_calls[3] == "-":
                    all_messages_for_lost_calls[3] = None

                response_lost_data = requests.get(API_URLs.lost_calls,
                                                      params={'date_from': all_messages_for_lost_calls[1], 'date_to': all_messages_for_lost_calls[2],
                                                              'project_id': all_messages_for_lost_calls[3]})
                dicti = response_lost_data.json()
                dct = dicti[0]
                value_percent_without_out = round(dct['percent_without_outbound'],4)  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                value_percent_w_out = round(dct['percent_with_outbound'], 4)  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö
                cnt_without_usr_out = dct['count_without_user_and_outbound']
                cnt_all_without_out = dct['count_all_without_outbound']
                cnt_without_user = dct['count_without_user']
                cnt_all_w_out = dct['count_all_with_outbound']
                bot.send_message(message.chat.id, f"""
–ü–µ—Ä–∏–æ–¥ —Å {all_messages_for_lost_calls[1]} –¥–æ {all_messages_for_lost_calls[2]}
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_without_out}%
–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {value_percent_w_out}%
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö  = {cnt_without_usr_out}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_without_out}
–ö–æ–ª-–≤–æ —É—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö   = {cnt_without_user}
–ö–æ–ª-–≤–æ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ö–æ–¥—è—â–∏—Ö = {cnt_all_w_out}
                """)
                cnt_filt_for_lost_calls = [0]
                all_messages_for_lost_calls.clear()
        except:
              bot.send_message(message.chat.id, f'Some error')
              cnt_filt_for_lost_calls = [0]
              all_messages_for_lost_calls.clear()


    def get_date_from(message):

        try:
            if message.text == '–î–∞':
                cnt_filt_for_lost_calls[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
                cnt_filt_for_lost_calls[0] = 0



        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)

    def get_date_to(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_lost_calls[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
                cnt_filt_for_lost_calls[0] = 0
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)

    def get_project_id(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_lost_calls[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø—Ä–æ–µ–∫—Ç–∞.\n–î–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å id –ø—Ä–æ–µ–∫—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ -')
                bot.register_next_step_handler(msg, get_start)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
                cnt_filt_for_lost_calls[0] = 0
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)



    @bot.message_handler(commands=['info_phones'])  # —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    def get_info_phones(message):
        response_lost_data = requests.get(API_URLs.info_phones)
        dicti = response_lost_data.json()
        lst = []
        for dct in dicti:
            string = f"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤= {dct['count']}
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ = {dct['name']}
–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ = {dct['active_users_count']}"""
            lst.append(string)
        lst = '\n----------------\n'.join(lst)
        bot.send_message(message.chat.id, f'{lst}')


    @bot.message_handler(commands=['avg_sec'])  # —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    def get_start_for_avg(message):
        global cnt_filt_for_avg_sec
        global all_messages_for_avg_sec
        try:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            button1 = types.KeyboardButton('–î–∞')
            button2 = types.KeyboardButton('–ù–µ—Ç')
            keyboard.add(button1, button2)
            if cnt_filt_for_avg_sec[0] == 0:
                msg = bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.–í—ã –≥–æ—Ç–æ–≤—ã?', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_from_avg)
            elif cnt_filt_for_avg_sec[0] == 1:
                all_messages_for_avg_sec[len(all_messages_for_avg_sec) + 1] = message.text
                msg = bot.send_message(message.chat.id,
                                       ' –§–∏–ª—å—Ç—Ä date_from –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞',
                                       reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_to_avg)
            else:
                all_messages_for_avg_sec[len(all_messages_for_avg_sec) + 1] = message.text
                bot.send_message(message.chat.id, '–ö–æ–Ω–µ—Ü –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤')

                response_lost_data = requests.get(API_URLs.average_seconds,
                                                  params={'date_from': all_messages_for_avg_sec[1], 'date_to': all_messages_for_avg_sec[2]})
                dicti = response_lost_data.json()
                bot.send_message(message.chat.id, f'–§–∏–ª—å—Ç—Ä—ã: {all_messages_for_avg_sec[1]}, {all_messages_for_avg_sec[2]}')
                lst = []
                for dct in dicti:
                    string = f"""user_id= {dct['user_id']}
created_at= {dct['created_at']}
avg_total= {dct['avg_total']}"""
                    lst.append(string)
                lst = '\n----------------\n'.join(lst)
                try:
                    bot.send_message(message.chat.id, f'{lst}')
                    cnt_filt_for_avg_sec = [0]
                    all_messages_for_avg_sec.clear()
                except:
                     bot.send_message(message.chat.id, f'–û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥')
                     cnt_filt_for_avg_sec = [0]
                     all_messages_for_avg_sec.clear()

        except:
            bot.send_message(message.chat.id, 'error')
            cnt_filt_for_avg_sec = [0]
            all_messages_for_avg_sec.clear()


    def get_date_from_avg(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_avg_sec[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start_for_avg)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
                cnt_filt_for_avg_sec[0] = 0
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_avg_sec)

    def get_date_to_avg(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_avg_sec[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start_for_avg)
            else:
                msg = bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
                cnt_filt_for_avg_sec[0] = 0

        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_avg_sec)

    @bot.message_handler(commands=['conversion'])
    def get_start_for_conversion(message):
        global all_messages_for_conversion
        global cnt_filt_for_conversion
        try:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            button1 = types.KeyboardButton('–î–∞')
            button2 = types.KeyboardButton('–ù–µ—Ç')
            keyboard.add(button1, button2)
            if cnt_filt_for_conversion[0] == 0:
                msg = bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.–í—ã –≥–æ—Ç–æ–≤—ã?', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_from_conversion)
            elif cnt_filt_for_conversion[0] == 1:
                all_messages_for_conversion[len(all_messages_for_conversion) + 1] = message.text
                msg = bot.send_message(message.chat.id, ' –§–∏–ª—å—Ç—Ä date_from –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_date_to_conversion)
            elif cnt_filt_for_conversion[0] == 2:
                all_messages_for_conversion[len(all_messages_for_conversion) + 1] = message.text
                msg = bot.send_message(message.chat.id, ' –§–∏–ª—å—Ç—Ä date_to –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_project_id_conversion)
            elif cnt_filt_for_conversion[0] == 3:
                all_messages_for_conversion[len(all_messages_for_conversion) + 1] = message.text
                msg = bot.send_message(message.chat.id, ' –§–∏–ª—å—Ç—Ä project_id –∑–∞–ø–∏—Å–∞–Ω\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –î–∞', reply_markup=keyboard)
                bot.register_next_step_handler(msg, get_user_id_conversion)
            else:
                all_messages_for_conversion[len(all_messages_for_conversion) + 1] = message.text
                bot.send_message(message.chat.id, '–ö–æ–Ω–µ—Ü –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤')

                if all_messages_for_conversion[3] == "-":
                    all_messages_for_conversion[3] = None

                if all_messages_for_conversion[4] == '-':
                    all_messages_for_conversion[4] = None


                    response_lost_data = requests.get(API_URLs.conversion,
                                                      params={'date_from': all_messages_for_conversion[1], 'date_to': all_messages_for_conversion[2],
                                                              'project_id': all_messages_for_conversion[3], 'user_id': all_messages_for_conversion[4]})
                    dicti = response_lost_data.json()
                    dct = dicti[0]
                    key = round(dct['percentage'],4)
                    if len(dicti) == 0:
                        print('–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                        bot.send_message(message.chat.id, f'–§–∏–ª—å—Ç—Ä—ã = {all_messages_for_conversion[1]}, {all_messages_for_conversion[2]} , {all_messages_for_conversion[3]} , {all_messages_for_conversion[4]}  ')
                        bot.send_message(message.chat.id, f'–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                        all_messages_for_conversion.clear()
                        cnt_filt_for_conversion = [0]
                    else:
                        bot.send_message(message.chat.id, f'–§–∏–ª—å—Ç—Ä—ã: {all_messages_for_conversion[1]}, {all_messages_for_conversion[2]} , {all_messages_for_conversion[3]} , {all_messages_for_conversion[4]}  ')
                        bot.send_message(message.chat.id, f'–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ = {key}% ')
                        all_messages_for_conversion.clear()
                        cnt_filt_for_conversion = [0]
        except:
                    bot.send_message(message.chat.id, f'error')
                    all_messages_for_conversion.clear()
                    cnt_filt_for_conversion = [0]





    def get_date_from_conversion(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_conversion[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start_for_conversion)
            else:
                cnt_filt_for_conversion[0] = 0
                bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)

    def get_date_to_conversion(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_conversion[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Çe YYYY-MM-DD')
                bot.register_next_step_handler(msg, get_start_for_conversion)
            else:
                cnt_filt_for_conversion[0] = 0
                bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')

        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)

    def get_project_id_conversion(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_conversion[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø—Ä–æ–µ–∫—Ç–∞.\n–î–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å id –ø—Ä–æ–µ–∫—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ -')
                bot.register_next_step_handler(msg, get_start_for_conversion)
            else:
                cnt_filt_for_conversion[0] = 0
                bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)
    def get_user_id_conversion(message):
        try:
            if message.text == '–î–∞':
                cnt_filt_for_conversion[0] += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id —é–µ–∑—Ä–∞.\n–î–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å id —é–∑–µ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ -')
                bot.register_next_step_handler(msg, get_start_for_conversion)
            else:
                cnt_filt_for_conversion[0] = 0
                bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
        except:
            bot.send_message(message.chat.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞.')
            print(all_messages_for_lost_calls)


    @bot.message_handler(commands=['info'])
    def get_start_for_info(message):
        bot.send_message(message.chat.id,
    """
/avg_sec - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤(—Å—Ç–∞—Ç—É—Å READY)
/conversion - –ö–æ–Ω–≤–µ—Ä—Å–∏—è
/info_phones - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö
/lost_calls - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
/info - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
         """)


    bot.polling()


